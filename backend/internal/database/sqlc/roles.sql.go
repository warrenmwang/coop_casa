// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: roles.sql

package sqlc

import (
	"context"
)

const createNewUserRole = `-- name: CreateNewUserRole :exec
INSERT INTO
    roles (user_id, "role")
VALUES
    ($1, $2)
`

type CreateNewUserRoleParams struct {
	UserID string
	Role   string
}

func (q *Queries) CreateNewUserRole(ctx context.Context, arg CreateNewUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, createNewUserRole, arg.UserID, arg.Role)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM roles
WHERE
    user_id = $1
`

func (q *Queries) DeleteUserRole(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserRole, userID)
	return err
}

const getUserRole = `-- name: GetUserRole :one
SELECT
    id, user_id, role, updated_at
FROM
    roles
WHERE
    user_id = $1
`

func (q *Queries) GetUserRole(ctx context.Context, userID string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, userID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Role,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE roles
SET
    "role" = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE
    user_id = $1
`

type UpdateUserRoleParams struct {
	UserID string
	Role   string
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRole, arg.UserID, arg.Role)
	return err
}
