// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_properties.sql

package sqlc

import (
	"context"
	"time"
)

const createUserSavedProperty = `-- name: CreateUserSavedProperty :exec
INSERT INTO user_saved_properties(user_id, property_id)
    VALUES ($1, $2)
`

type CreateUserSavedPropertyParams struct {
	UserID     string
	PropertyID string
}

func (q *Queries) CreateUserSavedProperty(ctx context.Context, arg CreateUserSavedPropertyParams) error {
	_, err := q.db.ExecContext(ctx, createUserSavedProperty, arg.UserID, arg.PropertyID)
	return err
}

const deleteUserSavedProperty = `-- name: DeleteUserSavedProperty :exec
DELETE FROM user_saved_properties
WHERE user_id = $1
    AND property_id = $2
`

type DeleteUserSavedPropertyParams struct {
	UserID     string
	PropertyID string
}

func (q *Queries) DeleteUserSavedProperty(ctx context.Context, arg DeleteUserSavedPropertyParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSavedProperty, arg.UserID, arg.PropertyID)
	return err
}

const getUserSavedProperties = `-- name: GetUserSavedProperties :many
SELECT
    property_id,
    created_at
FROM
    user_saved_properties
WHERE
    user_id = $1
`

type GetUserSavedPropertiesRow struct {
	PropertyID string
	CreatedAt  time.Time
}

func (q *Queries) GetUserSavedProperties(ctx context.Context, userID string) ([]GetUserSavedPropertiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserSavedProperties, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSavedPropertiesRow
	for rows.Next() {
		var i GetUserSavedPropertiesRow
		if err := rows.Scan(&i.PropertyID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
