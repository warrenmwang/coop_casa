// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const adminGetUsers = `-- name: AdminGetUsers :many
SELECT
    id, user_id, email, first_name, last_name, birth_date, gender, location, interests, created_at, updated_at
FROM
    users
ORDER BY
    CASE
        WHEN $3 <> '' THEN similarity (CONCAT(first_name, ' ', last_name), $3)
        ELSE 1
    END DESC
LIMIT
    $1
OFFSET
    $2
`

type AdminGetUsersParams struct {
	Limit   int32
	Offset  int32
	Column3 interface{}
}

// Want to filter by similarity to name if name argument is present.
func (q *Queries) AdminGetUsers(ctx context.Context, arg AdminGetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, adminGetUsers, arg.Limit, arg.Offset, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.BirthDate,
			&i.Gender,
			&i.Location,
			pq.Array(&i.Interests),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalCountCommunities = `-- name: GetTotalCountCommunities :one
SELECT
    count(*)
FROM
    communities
`

func (q *Queries) GetTotalCountCommunities(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalCountCommunities)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalCountProperties = `-- name: GetTotalCountProperties :one
SELECT
    count(*)
FROM
    properties
`

func (q *Queries) GetTotalCountProperties(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalCountProperties)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalCountUsers = `-- name: GetTotalCountUsers :one
SELECT
    count(*)
FROM
    users
`

func (q *Queries) GetTotalCountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalCountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}
