// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const adminGetUsers = `-- name: AdminGetUsers :many
SELECt id, user_id, email, first_name, last_name, birth_date, gender, location, interests, created_at, updated_at FROM users
ORDER BY id 
LIMIT $1 OFFSET $2
`

type AdminGetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) AdminGetUsers(ctx context.Context, arg AdminGetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, adminGetUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.BirthDate,
			&i.Gender,
			&i.Location,
			&i.Interests,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :exec
WITH new_user AS (
    INSERT INTO users (user_id, email)
    VALUES ($1, $2)
    RETURNING user_id
)
INSERT INTO users_avatars (user_id, avatar)
SELECT user_id, $3
FROM new_user
`

type CreateUserParams struct {
	UserID string
	Email  string
	Avatar sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.UserID, arg.Email, arg.Avatar)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const deleteUserAvatar = `-- name: DeleteUserAvatar :exec
DELETE FROM users_avatars WHERE user_id = $1
`

func (q *Queries) DeleteUserAvatar(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserAvatar, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, email, first_name, last_name, birth_date, gender, location, interests, created_at, updated_at FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.BirthDate,
		&i.Gender,
		&i.Location,
		&i.Interests,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAvatar = `-- name: GetUserAvatar :one
SELECT avatar FROM users_avatars
WHERE user_id = $1
`

func (q *Queries) GetUserAvatar(ctx context.Context, userID string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserAvatar, userID)
	var avatar sql.NullString
	err := row.Scan(&avatar)
	return avatar, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
    first_name = $2, 
    last_name = $3, 
    birth_date = $4,
    gender = $5,
    "location" = $6,
    interests = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID    string
	FirstName sql.NullString
	LastName  sql.NullString
	BirthDate sql.NullString
	Gender    sql.NullString
	Location  sql.NullString
	Interests sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.BirthDate,
		arg.Gender,
		arg.Location,
		arg.Interests,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users_avatars
SET
    avatar = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdateUserAvatarParams struct {
	UserID string
	Avatar sql.NullString
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatar, arg.UserID, arg.Avatar)
	return err
}
