// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_images.sql

package sqlc

import (
	"context"
)

const createUserImage = `-- name: CreateUserImage :exec
INSERT INTO
    user_images (user_id, file_name, mime_type, size, data)
VALUES
    ($1, $2, $3, $4, $5)
`

type CreateUserImageParams struct {
	UserID   string
	FileName string
	MimeType string
	Size     int64
	Data     []byte
}

func (q *Queries) CreateUserImage(ctx context.Context, arg CreateUserImageParams) error {
	_, err := q.db.ExecContext(ctx, createUserImage,
		arg.UserID,
		arg.FileName,
		arg.MimeType,
		arg.Size,
		arg.Data,
	)
	return err
}

const deleteUserImages = `-- name: DeleteUserImages :exec
DELETE FROM user_images
WHERE
    user_id = $1
`

func (q *Queries) DeleteUserImages(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserImages, userID)
	return err
}

const getUserImages = `-- name: GetUserImages :many
SELECT
    id, user_id, file_name, mime_type, size, data, created_at
FROM
    user_images
WHERE
    user_id = $1
`

func (q *Queries) GetUserImages(ctx context.Context, userID string) ([]UserImage, error) {
	rows, err := q.db.QueryContext(ctx, getUserImages, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserImage
	for rows.Next() {
		var i UserImage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileName,
			&i.MimeType,
			&i.Size,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
