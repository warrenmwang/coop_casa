// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: properties.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProperty = `-- name: CreateProperty :exec
WITH new_property AS (
    INSERT INTO properties 
    (
    property_id, lister_user_id, "name", "description", 
    address_1, address_2, city, "state", zipcode, country, num_bedrooms, 
    num_toilets, num_showers_baths, cost_dollars, cost_cents, misc_note
    )
    VALUES 
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
    RETURNING property_id
)
INSERT INTO properties_images (property_id, images)
SELECT property_id, $17
FROM new_property
`

type CreatePropertyParams struct {
	PropertyID      string
	ListerUserID    string
	Name            string
	Description     sql.NullString
	Address1        string
	Address2        sql.NullString
	City            string
	State           string
	Zipcode         string
	Country         string
	NumBedrooms     int16
	NumToilets      int16
	NumShowersBaths int16
	CostDollars     int64
	CostCents       int16
	MiscNote        sql.NullString
	Images          sql.NullString
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) error {
	_, err := q.db.ExecContext(ctx, createProperty,
		arg.PropertyID,
		arg.ListerUserID,
		arg.Name,
		arg.Description,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.Zipcode,
		arg.Country,
		arg.NumBedrooms,
		arg.NumToilets,
		arg.NumShowersBaths,
		arg.CostDollars,
		arg.CostCents,
		arg.MiscNote,
		arg.Images,
	)
	return err
}

const deleteProperty = `-- name: DeleteProperty :exec
WITH deleted_property AS (
    DELETE FROM properties
    WHERE properties.property_id = $1
    RETURNING property_id
)
DELETE FROM properties_images
WHERE properties_images.property_id
IN
(SELECT deleted_property.property_id FROM deleted_property)
`

func (q *Queries) DeleteProperty(ctx context.Context, propertyID string) error {
	_, err := q.db.ExecContext(ctx, deleteProperty, propertyID)
	return err
}

const getProperty = `-- name: GetProperty :one
SELECT id, property_id, lister_user_id, name, description, address_1, address_2, city, state, zipcode, country, num_bedrooms, num_toilets, num_showers_baths, cost_dollars, cost_cents, misc_note, created_at, updated_at FROM properties
WHERE property_id = $1
`

func (q *Queries) GetProperty(ctx context.Context, propertyID string) (Property, error) {
	row := q.db.QueryRowContext(ctx, getProperty, propertyID)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.ListerUserID,
		&i.Name,
		&i.Description,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.Country,
		&i.NumBedrooms,
		&i.NumToilets,
		&i.NumShowersBaths,
		&i.CostDollars,
		&i.CostCents,
		&i.MiscNote,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertyImages = `-- name: GetPropertyImages :one
SELECT id, property_id, images, updated_at FROM properties_images
WHERE property_id = $1
`

func (q *Queries) GetPropertyImages(ctx context.Context, propertyID string) (PropertiesImage, error) {
	row := q.db.QueryRowContext(ctx, getPropertyImages, propertyID)
	var i PropertiesImage
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Images,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProperty = `-- name: UpdateProperty :exec
UPDATE properties
SET 
    "name" = $2,
    "description" = $3, 
    address_1 = $4, 
    address_2 = $5, 
    city = $6, 
    "state" = $7, 
    zipcode = $8, 
    country = $9, 
    num_bedrooms = $10,
    num_toilets = $11,
    num_showers_baths = $12,
    cost_dollars = $13,
    cost_cents = $14,
    misc_note = $15,
    lister_user_id = $16,
    updated_at = CURRENT_TIMESTAMP
WHERE property_id = $1
`

type UpdatePropertyParams struct {
	PropertyID      string
	Name            string
	Description     sql.NullString
	Address1        string
	Address2        sql.NullString
	City            string
	State           string
	Zipcode         string
	Country         string
	NumBedrooms     int16
	NumToilets      int16
	NumShowersBaths int16
	CostDollars     int64
	CostCents       int16
	MiscNote        sql.NullString
	ListerUserID    string
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) error {
	_, err := q.db.ExecContext(ctx, updateProperty,
		arg.PropertyID,
		arg.Name,
		arg.Description,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.Zipcode,
		arg.Country,
		arg.NumBedrooms,
		arg.NumToilets,
		arg.NumShowersBaths,
		arg.CostDollars,
		arg.CostCents,
		arg.MiscNote,
		arg.ListerUserID,
	)
	return err
}

const updatePropertyImages = `-- name: UpdatePropertyImages :exec
UPDATE properties_images
SET
    images = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE property_id = $1
`

type UpdatePropertyImagesParams struct {
	PropertyID string
	Images     sql.NullString
}

func (q *Queries) UpdatePropertyImages(ctx context.Context, arg UpdatePropertyImagesParams) error {
	_, err := q.db.ExecContext(ctx, updatePropertyImages, arg.PropertyID, arg.Images)
	return err
}
