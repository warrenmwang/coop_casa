services:
  beta_proxy: 
    build: ./proxy
    networks:
      - frontend
      - backend
    environment:
      INTERNAL_FRONTEND_PORT: ${INTERNAL_FRONTEND_PORT}
      INTERNAL_BACKEND_PORT: ${INTERNAL_BACKEND_PORT}
    ports:
      - "${EXTERNAL_PROXY_PORT}:80"
    depends_on:
      - beta_psql_db
      - beta_go_backend
      - beta_ts_frontend

  beta_psql_db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - backend
    volumes:
      - beta_psql_volume:/var/lib/postgresql/data # external : internal

  beta_go_backend:
    build: ./backend
    restart: always
    depends_on: 
      - beta_psql_db
    networks:
      - backend
    environment:
      INTERNAL_BACKEND_PORT: ${INTERNAL_BACKEND_PORT}
      EXTERNAL_FRONTEND_PORT: ${EXTERNAL_FRONTEND_PORT}

      IS_PROD: ${IS_PROD}
      PROD_HOST: ${PROD_HOST}

      JWT_SIGN_SECRET: ${JWT_SIGN_SECRET}
      AUTH_KEY_SECRET: ${AUTH_KEY_SECRET}
      DB_ENCRYPT_KEY_SECRET: ${DB_ENCRYPT_KEY_SECRET}

      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}

      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    command: >
      sh -c "./goose_migrate.sh && ./main"
  
  beta_ts_frontend:
    build: 
      context: ./frontend
      args:
        REACT_APP_IS_PROD: ${REACT_APP_IS_PROD}
        REACT_APP_API_PROD_HOST: ${REACT_APP_API_PROD_HOST}
        REACT_APP_API_PORT: ${REACT_APP_API_PORT}
    restart: always
    depends_on:
      - beta_go_backend
    networks:
      - frontend
    command: >
      serve -s build -l ${INTERNAL_FRONTEND_PORT}

volumes:
  beta_psql_volume:

networks:
  frontend:
    name: beta_coop_frontend_nw
    driver: bridge
  backend:
    name: beta_coop_backend_nw
    driver: bridge
